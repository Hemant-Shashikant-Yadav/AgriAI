{"version":3,"file":"static/js/168.c4b9f0e4.chunk.js","mappings":"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","sources":["components/Login.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { Modal, message, Spin } from \"antd\";\r\nconst Login = () => {\r\n    const url = \"http://localhost:5000/api/\";\r\n    const [formData, setFormData] = useState({\r\n        email: \"\",\r\n        password: \"\",\r\n    });\r\n\r\n    const [errors, setErrors] = useState({});\r\n    const [loginLoading, setLoginLoading] = useState(false);\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const handleLoginClick = async (e) => {\r\n        e.preventDefault();\r\n        setLoginLoading(true);\r\n        // Performing client-side validation before sending the request to server\r\n        const validationErrors = validateForm(formData);\r\n        if (Object.keys(validationErrors).length !== 0) {\r\n            setErrors(validationErrors);\r\n            setLoginLoading(false);\r\n            return;\r\n        }\r\n\r\n        try {\r\n            // Contacting the backend\r\n            const response = await fetch(`${url}auth/login`, {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify({\r\n                    email: formData.email,\r\n                    password: formData.password,\r\n                }),\r\n            });\r\n\r\n            // User not found\r\n            if (response.status === 404) {\r\n                Modal.error({\r\n                    title: \"Error\",\r\n                    content: \"User not found please create an account first\",\r\n                });\r\n                navigate(\"/signup\");\r\n                setLoginLoading(false);\r\n                return;\r\n            }\r\n\r\n            // Handle invalid credentials\r\n            if (response.status === 401) {\r\n                Modal.error({\r\n                    title: \"Error\",\r\n                    content: \"Invalid Credentials\",\r\n                });\r\n                setLoginLoading(false);\r\n                return;\r\n            }\r\n\r\n            if (!response.ok) {\r\n                Modal.error({\r\n                    title: \"Error\",\r\n                    content: \"Unknown Error\",\r\n                });\r\n                setLoginLoading(false);\r\n                return;\r\n            }\r\n\r\n            // On successful login\r\n            const data = await response.json();\r\n\r\n            localStorage.setItem(\"token\", data.authToken);\r\n            localStorage.setItem(\"username\", data.username);\r\n            setLoginLoading(false);\r\n            navigate(\"/\");\r\n            message.success({ title: \"Success\", content: \"Login Successful\" });\r\n        } catch (error) {\r\n            Modal.error({\r\n                title: \"Error\",\r\n                content:\r\n                    \"Error connecting to backend please check internet connection OR try after sometime\",\r\n            });\r\n            setLoginLoading(false);\r\n            console.error(\"Error during login request:\", error);\r\n        }\r\n    };\r\n\r\n    // Validating the form on client side\r\n    const validateForm = (data) => {\r\n        let errors = {};\r\n\r\n        if (!data.email.trim()) {\r\n            errors.email = \"Email is required\";\r\n        } else if (!isValidEmail(data.email)) {\r\n            errors.email = \"Invalid email address\";\r\n        }\r\n\r\n        if (!data.password.trim()) {\r\n            errors.password = \"Password is required\";\r\n        } else if (data.password.length < 8) {\r\n            errors.password = \"Password should be at least 8 characters\";\r\n        }\r\n\r\n        return errors;\r\n    };\r\n\r\n    const isValidEmail = (email) => {\r\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n        return emailRegex.test(email);\r\n    };\r\n\r\n    const handleChange = (e) => {\r\n        setFormData({\r\n            ...formData,\r\n            [e.target.id]: e.target.value,\r\n        });\r\n\r\n        // Clear the corresponding error when the user types\r\n        setErrors({\r\n            ...errors,\r\n            [e.target.id]: \"\",\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"container-fluid p-3 my-5 h-custom\">\r\n            <div className=\"row\">\r\n                <div className=\"col-lg-6 col-sm-12 col-md-6\">\r\n                    <img\r\n                        src=\"https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-login-form/draw2.webp\"\r\n                        className=\"img-fluid\"\r\n                        alt=\"Sample image\"\r\n                    />\r\n                </div>\r\n                <form\r\n                    onSubmit={handleLoginClick}\r\n                    className=\"col-sm-12 col-md-6 col-lg-6 my-lg-5 my-md-3 py-md-3 py-lg-5 my-sm-5\"\r\n                >\r\n                    <div className=\"mb-4\">\r\n                        <label htmlFor=\"email\" className=\"form-label\">\r\n                            Email\r\n                        </label>\r\n                        <input\r\n                            type=\"email\"\r\n                            className={`form-control ${\r\n                                errors.email ? \"is-invalid\" : \"\"\r\n                            }`}\r\n                            id=\"email\"\r\n                            value={formData.email}\r\n                            onChange={handleChange}\r\n                        />\r\n                        {errors.email && (\r\n                            <div className=\"invalid-feedback\">\r\n                                {errors.email}\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n\r\n                    <div className=\"mb-4\">\r\n                        <label htmlFor=\"password\" className=\"form-label\">\r\n                            Password\r\n                        </label>\r\n                        <input\r\n                            type=\"password\"\r\n                            className={`form-control form-control-lg ${\r\n                                errors.password ? \"is-invalid\" : \"\"\r\n                            }`}\r\n                            id=\"password\"\r\n                            value={formData.password}\r\n                            onChange={handleChange}\r\n                        />\r\n                        {errors.password && (\r\n                            <div className=\"invalid-feedback\">\r\n                                {errors.password}\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n\r\n                    <div className=\"text-center mt-4 pt-2 w-25\">\r\n                        <Spin spinning={loginLoading}>\r\n                            <button\r\n                                className=\"w-100 btn btn-info\"\r\n                                type=\"submit\"\r\n                                disabled={loginLoading}\r\n                            >\r\n                                Login\r\n                            </button>\r\n                        </Spin>\r\n                    </div>\r\n                    <hr />\r\n                    <p className=\"small fw-bold mt-2 pt-1 mb-2\">\r\n                        Don't have an account?{\" \"}\r\n                        <Link to=\"/signup\" className=\"link link-info\">\r\n                            Register\r\n                        </Link>\r\n                    </p>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n"],"names":["Login","formData","setFormData","useState","email","password","errors","setErrors","loginLoading","setLoginLoading","navigate","useNavigate","validateForm","data","trim","isValidEmail","length","test","handleChange","e","target","id","value","_jsx","className","children","_jsxs","src","alt","onSubmit","async","preventDefault","validationErrors","Object","keys","response","fetch","concat","method","headers","body","JSON","stringify","status","Modal","error","title","content","ok","json","localStorage","setItem","authToken","username","message","success","console","htmlFor","type","onChange","Spin","spinning","disabled","Link","to"],"sourceRoot":""}