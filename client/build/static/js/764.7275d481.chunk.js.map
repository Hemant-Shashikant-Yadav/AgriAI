{"version":3,"file":"static/js/764.7275d481.chunk.js","mappings":"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","sources":["components/AdminNote.jsx","components/AdminPage.jsx"],"sourcesContent":["import { useRef } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { message } from \"antd\";\r\nconst AdminNote = (props) => {\r\n    const url = \"http://localhost:5000/api/\";\r\n\r\n    // From AntDesign\r\n    const [messageApi, contextHolder] = message.useMessage();\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const expertOpinion = useRef(\"\");\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        messageApi.loading({ content: \"Updating Information\" });\r\n\r\n        const inputValue = expertOpinion.current.value;\r\n        try {\r\n            const response = await fetch(\r\n                `${url}notes/updatenote/${props.noteId}`,\r\n                {\r\n                    method: \"PUT\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                    },\r\n                    body: JSON.stringify({\r\n                        description: inputValue,\r\n                    }),\r\n                }\r\n            );\r\n            if (response.status === 404) {\r\n                messageApi.error({ content: \"Note was not found\" });\r\n                return;\r\n            }\r\n\r\n            if (!response.ok) {\r\n                messageApi.error({ content: \"Could not update the note\" });\r\n                return;\r\n            }\r\n            messageApi.destroy()\r\n            messageApi.success({ content: \"Information Updated\" });\r\n            props.getAllNotesAdmin();\r\n        } catch (error) {\r\n            messageApi.error({ content: \"Error Updating Information\" });\r\n            console.log(error);\r\n        }\r\n    };\r\n    return (\r\n        <div className=\"card col\" style={{ width: 18 + \"rem\" }}>\r\n            {contextHolder}\r\n            <img src={props.image} className=\"card-img-top\" alt=\"Plant\" />\r\n            <div className=\"card-body\">\r\n                <h4 className=\"text-warning\">AI's Prediction</h4>\r\n                <h5 className=\"card-title\">{props.title}</h5>\r\n                {props.description ? (\r\n                    <p className=\"card-text text-start\">\r\n                        <span>\r\n                            <b className=\"text-warning\">Expert's Opinion :</b>\r\n                        </span>\r\n                        {props.description}\r\n                    </p>\r\n                ) : (\r\n                    <div>\r\n                        <form onSubmit={handleSubmit} className=\"mt-4 w-100\">\r\n                            <label htmlFor=\"ExpertInput\">\r\n                                <span className=\"text-info fs-4\">\r\n                                    Expert's Opinion :\r\n                                </span>\r\n                            </label>\r\n                            <input\r\n                                type=\"tel\"\r\n                                name=\"\"\r\n                                id=\"ExpertInput\"\r\n                                ref={expertOpinion}\r\n                            />\r\n\r\n                            <button className=\"btn btn-outline-info mt-2\">\r\n                                confirm\r\n                            </button>\r\n                        </form>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AdminNote;\r\n","import \"../App.css\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Modal } from \"antd\";\r\nimport AdminNote from \"./AdminNote\";\r\nconst AdminPage = () => {\r\n    const url = \"http://localhost:5000/api/\";\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const [notes, setNotes] = useState([]);\r\n\r\n    useEffect(() => {\r\n        // if not logged in then navigate to the login page\r\n        if (!localStorage.getItem(\"token\")) {\r\n            navigate(\"/login\");\r\n            return;\r\n        }\r\n\r\n        // if user is not admin then go to the home page\r\n        if (!localStorage.getItem(\"isAdmin\")) {\r\n            navigate(\"/home\");\r\n            return;\r\n        }\r\n\r\n        getAllNotesAdmin();\r\n    }, []);\r\n    const getAllNotesAdmin = async () => {\r\n        try {\r\n            const response = await fetch(`${url}notes/getallnotesAdmin`, {\r\n                method: \"GET\",\r\n                headers: {\r\n                    \"auth-token\": localStorage.getItem(\"token\"),\r\n                },\r\n            });\r\n            // Check if the response is ok\r\n            if (!response.ok) {\r\n                console.log(response);\r\n                Modal.error({\r\n                    title: \"Error\",\r\n                    content: \"Error fetching notes\",\r\n                });\r\n                return;\r\n            }\r\n\r\n            const data = await response.json();\r\n            setNotes(data);\r\n        } catch (error) {\r\n            Modal.error({\r\n                title: \"Error\",\r\n                content:\r\n                    \"Please Check Internet connectivity or try after sometime\",\r\n            });\r\n        }\r\n    };\r\n    return (\r\n        <>\r\n            {notes.length ? (\r\n                <div className=\"container my-5 note-container \">\r\n                    {notes.map((note) => (\r\n                        <AdminNote\r\n                            key={note._id}\r\n                            noteId={note._id}\r\n                            baseImage={note.baseImage}\r\n                            description={note.description}\r\n                            title={note.title}\r\n                            image={note.baseImage}\r\n                            getAllNotesAdmin={getAllNotesAdmin}\r\n                        />\r\n                    ))}\r\n                </div>\r\n            ) : (\r\n                <div className=\"container\">\r\n                    <p className=\"w-100 fs-1 fw-semibold text-center my-5\">\r\n                        No Notes Found\r\n                    </p>\r\n                    <button\r\n                        className=\"btn btn-primary mx-auto\"\r\n                        onClick={getAllNotesAdmin}\r\n                    >\r\n                        {\" \"}\r\n                        Reload{\" \"}\r\n                    </button>\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AdminPage;\r\n"],"names":["props","messageApi","contextHolder","message","useMessage","expertOpinion","useNavigate","useRef","_jsxs","className","style","width","children","_jsx","src","image","alt","title","description","onSubmit","async","e","preventDefault","loading","content","inputValue","current","value","response","fetch","concat","noteId","method","headers","body","JSON","stringify","status","error","ok","destroy","success","getAllNotesAdmin","console","log","htmlFor","type","name","id","ref","AdminPage","navigate","notes","setNotes","useState","useEffect","localStorage","getItem","Modal","data","json","_Fragment","length","map","note","AdminNote","_id","baseImage","onClick"],"sourceRoot":""}