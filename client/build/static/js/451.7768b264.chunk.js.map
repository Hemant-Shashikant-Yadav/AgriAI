{"version":3,"file":"static/js/451.7768b264.chunk.js","mappings":"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","sources":["components/Home.jsx"],"sourcesContent":["import \"../App.css\";\r\nimport \"../css/backgroundImage.css\";\r\nimport NoteContext from \"../context/notes/NoteContext\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { message } from \"antd\";\r\nconst Home = () => {\r\n    const noteContext = useContext(NoteContext);\r\n\r\n    // From AntDesign\r\n    const [messageApi, contextHolder] = message.useMessage();\r\n\r\n    const url = \"http://localhost:5000/api/\";\r\n\r\n    // Destructuring\r\n    const { notes, setNotes } = noteContext;\r\n    const [selectedImage, setSelectedImage] = useState(null);\r\n    const [imageString, setImageString] = useState(null);\r\n    const [uploadingStatus, setUploadingStatus] = useState(false);\r\n\r\n    const handleInputImageChange = (e) => {\r\n        let newImage = e.target.files[0];\r\n        setSelectedImage(newImage);\r\n\r\n        const reader = new FileReader();\r\n        try {\r\n            // Set up the onload event handler for the FileReader\r\n            reader.onload = function (event) {\r\n                // Create a new Image object\r\n                const image = new Image();\r\n\r\n                // Set up the onload event handler for the Image\r\n                image.onload = function () {\r\n                    // Now that the image has loaded, you can access its dimensions\r\n\r\n                    // Create a canvas element\r\n                    const canvas = document.createElement(\"canvas\");\r\n                    const ctx = canvas.getContext(\"2d\");\r\n\r\n                    // Set the canvas dimensions to match the image\r\n                    canvas.width = image.width;\r\n                    canvas.height = image.height;\r\n\r\n                    // Draw the image onto the canvas\r\n                    ctx.drawImage(image, 0, 0);\r\n\r\n                    // Get the base64-encoded data URL\r\n                    const base64String = canvas.toDataURL(\"image/png\");\r\n\r\n                    setImageString(base64String);\r\n                };\r\n\r\n                // Set the source of the Image to the data URL obtained from FileReader\r\n                image.src = event.target.result;\r\n            };\r\n            // Read the selected image as a data URL using FileReader\r\n            reader.readAsDataURL(newImage);\r\n        } catch (error) {}\r\n    };\r\n\r\n    // if not logged in then navigate to the login page\r\n    const navigate = useNavigate();\r\n    useEffect(() => {\r\n        if (!localStorage.getItem(\"token\")) {\r\n            navigate(\"/login\");\r\n            return;\r\n        }\r\n\r\n        getNotes();\r\n    }, []);\r\n\r\n    let getNotes = async () => {\r\n        try {\r\n            const response = await fetch(`${url}notes/getallnotes`, {\r\n                method: \"GET\",\r\n                headers: {\r\n                    \"auth-token\": localStorage.getItem(\"token\"),\r\n                },\r\n            });\r\n\r\n            // Check if the response is ok\r\n            if (!response.ok) {\r\n                return;\r\n            }\r\n\r\n            // Parse the JSON data from the response\r\n            const data = await response.json();\r\n\r\n            setNotes(data);\r\n        } catch (error) {\r\n            console.error(\"Error fetching notes:\", error);\r\n        }\r\n    };\r\n\r\n    const uploadImage = async () => {\r\n        setUploadingStatus(true);\r\n        try {\r\n            messageApi.open({\r\n                type: \"loading\",\r\n                content: \"Uploading Image...\",\r\n                duration: 0,\r\n            });\r\n            const response = await fetch(`${url}notes/addnote`, {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    \"auth-token\": localStorage.getItem(\"token\"),\r\n                },\r\n                body: JSON.stringify({\r\n                    baseImage: imageString,\r\n                }),\r\n            });\r\n\r\n            // Check if the response is ok\r\n            if (!response.ok) {\r\n                messageApi.destroy();\r\n                messageApi.error(\"Error Uploading Image\");\r\n                setUploadingStatus(false);\r\n                return;\r\n            }\r\n            // Updating notes\r\n            const data = await response.json();\r\n            const currentNotes = notes;\r\n            currentNotes.push(data);\r\n            setNotes(currentNotes);\r\n            setSelectedImage(null);\r\n            getNotes();\r\n            messageApi.destroy();\r\n            messageApi.success(\"Successfully uploaded image\");\r\n            setUploadingStatus(false);\r\n        } catch (error) {\r\n            messageApi.destroy();\r\n            messageApi.error(\"Error Uploading Image\");\r\n            setUploadingStatus(false);\r\n            console.error(\"Error Uploading notes:\", error);\r\n        }\r\n    };\r\n    return (\r\n        <div className=\" pt-3 pb-3 \">\r\n            {contextHolder}\r\n            <div className=\"container d-flex flex-column align-items-center justify-content-center text-xxl-center backgroundImage w-75\">\r\n                <h2\r\n                    className=\"text-center fs-1 font-monospace pt-3 \"\r\n                    style={{ color: \"red\" }}\r\n                >\r\n                    {\" \"}\r\n                    Welcome back,{\" \"}\r\n                    {localStorage.getItem(\"username\")\r\n                        ? localStorage.getItem(\"username\")\r\n                        : \"username\"}{\" \"}\r\n                    !!!\r\n                </h2>\r\n                <div className=\"image-upload-container  \">\r\n                    <div className=\"img \">\r\n                        <input\r\n                            type=\"file\"\r\n                            accept=\"image/*\"\r\n                            name=\"\"\r\n                            id=\"image_upload\"\r\n                            hidden\r\n                            onChange={handleInputImageChange}\r\n                        />\r\n\r\n                        <label\r\n                            htmlFor=\"image_upload\"\r\n                            className=\"w-100 h-100 d-flex align-items-center justify-content-center\"\r\n                        >\r\n                            {selectedImage ? (\r\n                                <img\r\n                                    src={URL.createObjectURL(selectedImage)}\r\n                                    alt=\"selectedImage\"\r\n                                    className=\"w-100 h-100\"\r\n                                />\r\n                            ) : (\r\n                                <img\r\n                                    src=\"upload.png\"\r\n                                    alt=\"Browse Images\"\r\n                                    className=\"w-50 h-100\"\r\n                                />\r\n                            )}\r\n                        </label>\r\n                    </div>\r\n                    <button\r\n                        className=\"btn btn-outline-dark border-2 w-100 my-3 text-dark-emphasis fs-4\"\r\n                        onClick={uploadImage}\r\n                        disabled={!selectedImage || uploadingStatus}\r\n                    >\r\n                        Upload Image\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;\r\n"],"names":["Home","noteContext","useContext","NoteContext","messageApi","contextHolder","message","useMessage","url","notes","setNotes","selectedImage","setSelectedImage","useState","imageString","setImageString","uploadingStatus","setUploadingStatus","navigate","useNavigate","useEffect","localStorage","getItem","getNotes","async","response","fetch","concat","method","headers","ok","data","json","error","console","_jsxs","className","children","style","color","_jsx","type","accept","name","id","hidden","onChange","e","newImage","target","files","reader","FileReader","onload","event","image","Image","canvas","document","createElement","ctx","getContext","width","height","drawImage","base64String","toDataURL","src","result","readAsDataURL","htmlFor","URL","createObjectURL","alt","onClick","open","content","duration","body","JSON","stringify","baseImage","destroy","currentNotes","push","success","disabled"],"sourceRoot":""}