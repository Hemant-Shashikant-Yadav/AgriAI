{"version":3,"file":"static/js/524.72c5f62a.chunk.js","mappings":"wKAKA,MA+GA,EA/GgBA,KACZ,MAAOC,EAAUC,IAAeC,EAAAA,EAAAA,UAAS,CACrC,CAAEC,KAAM,6BAA8BC,QAAQ,MAE3CC,EAAYC,IAAiBJ,EAAAA,EAAAA,UAAS,IACvCK,GAAiBC,EAAAA,EAAAA,QAAO,MAExBC,GAAWC,EAAAA,EAAAA,OACjBC,EAAAA,EAAAA,YAAU,KACDC,aAAaC,QAAQ,UACtBJ,EAAS,SACb,GACD,IAEH,MAAMK,EAAS,IAAIC,EAAAA,GAAO,CACtBC,OAAQ,sDACRC,yBAAyB,IA4BvBC,EAAoBC,UAGtB,GAFAC,EAAEC,iBAEwB,KAAtBhB,EAAWiB,OAAe,OAE9BrB,GAAasB,GAAiB,IACvBA,EACH,CAAEpB,KAAME,EAAYD,QAAQ,MAGhC,MAAMoB,OAnCQL,WACdM,QAAQC,IAAIvB,GACZ,IAAK,IAADwB,EAAAC,EACA,MAAMC,QAAiBf,EAAOgB,KAAKC,YAAYC,OAAO,CAClDhC,SAAU,CAAC,CAAEiC,KAAM,OAAQC,QAAS/B,IACpCgC,MAAO,kBAGLC,EAAwB,OAARP,QAAQ,IAARA,GAAoB,QAAZF,EAARE,EAAUQ,QAAQ,UAAE,IAAAV,GAAS,QAATC,EAApBD,EAAsBW,eAAO,IAAAV,OAArB,EAARA,EAA+BM,QAIrD,OAHAT,QAAQC,IAAIG,GACZJ,QAAQC,IAAIU,GAELA,CACX,CAAE,MAAOG,GAEL,OADAd,QAAQc,MAAM,4BAA6BA,GACpC,4BACX,GAmB0BC,CAAUnC,GAEpCJ,GAAasB,GAAiB,IACvBA,EACH,CAAEpB,KAAMqB,EAAapB,QAAQ,MAGjCE,EAAc,GAAG,EAOrB,OAJAK,EAAAA,EAAAA,YAAU,KAzBFJ,EAAekC,SACflC,EAAekC,QAAQC,eAAe,CAAEC,SAAU,UAyBtC,GACjB,CAAC3C,KAGA4C,EAAAA,EAAAA,KAAA,OAAKC,UAAU,iBAAgBC,UAC3BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,OAAMC,UACjBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,YAAWC,SAAA,EACtBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,UAASC,SAAA,CACnB9C,EAASgD,KAAI,CAACC,EAAKC,KAChBN,EAAAA,EAAAA,KAAA,OAAKC,UAAU,eAAcC,UACzBF,EAAAA,EAAAA,KAAA,OACIC,UACII,EAAI7C,OACE,eACA,cACT0C,SAEAG,EAAI9C,QARsB+C,MAYvCN,EAAAA,EAAAA,KAAA,OAAKO,IAAK5C,QAEdqC,EAAAA,EAAAA,KAAA,QAAMQ,SAAUlC,EAAkB4B,UAC9BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,mBAAkBC,SAAA,EAC7BF,EAAAA,EAAAA,KAAA,SACIS,KAAK,OACLR,UAAU,eACVS,YAAY,uBACZC,MAAOlD,EACPmD,SAAWpC,GAAMd,EAAcc,EAAEqC,OAAOF,UAE5CX,EAAAA,EAAAA,KAAA,UACIC,UAAU,kBACVa,QAASxC,EAAkB4B,SAC9B,oBAOf,C","sources":["components/ChatbotComponent.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport \"../css/chatbot.css\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { OpenAI } from \"openai\";\r\n\r\nconst Chatbot = () => {\r\n    const [messages, setMessages] = useState([\r\n        { text: \"Hello! How can I help you?\", isUser: false },\r\n    ]);\r\n    const [newMessage, setNewMessage] = useState(\"\");\r\n    const messagesEndRef = useRef(null);\r\n\r\n    const navigate = useNavigate();\r\n    useEffect(() => {\r\n        if (!localStorage.getItem(\"token\")) {\r\n            navigate(\"/login\");\r\n        }\r\n    }, []);\r\n\r\n    const openai = new OpenAI({\r\n        apiKey: \"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\"   ,\r\n        dangerouslyAllowBrowser: true,\r\n    });\r\n\r\n    const askOpenAI = async (text) => {\r\n        console.log(text);\r\n        try {\r\n            const response = await openai.chat.completions.create({\r\n                messages: [{ role: \"user\", content: text }],\r\n                model: \"gpt-3.5-turbo\",\r\n            });\r\n\r\n            const generatedText = response?.choices[0]?.message?.content;\r\n            console.log(response);\r\n            console.log(generatedText);\r\n\r\n            return generatedText;\r\n        } catch (error) {\r\n            console.error(\"Error calling OpenAI API:\", error);\r\n            return \"Error generating response.\";\r\n        }\r\n    };\r\n\r\n    const scrollToBottom = () => {\r\n        if (messagesEndRef.current) {\r\n            messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\r\n        }\r\n    };\r\n\r\n    const handleSendMessage = async (e) => {\r\n        e.preventDefault();\r\n\r\n        if (newMessage.trim() === \"\") return;\r\n\r\n        setMessages((prevMessages) => [\r\n            ...prevMessages,\r\n            { text: newMessage, isUser: true },\r\n        ]);\r\n\r\n        const botResponse = await askOpenAI(newMessage);\r\n\r\n        setMessages((prevMessages) => [\r\n            ...prevMessages,\r\n            { text: botResponse, isUser: false },\r\n        ]);\r\n\r\n        setNewMessage(\"\");\r\n    };\r\n\r\n    useEffect(() => {\r\n        scrollToBottom();\r\n    }, [messages]);\r\n\r\n    return (\r\n        <div className=\"container mt-5\">\r\n            <div className=\"card\">\r\n                <div className=\"card-body\">\r\n                    <div className=\"chatbox\">\r\n                        {messages.map((msg, index) => (\r\n                            <div className=\"d-grid w-100\" key={index}>\r\n                                <div\r\n                                    className={\r\n                                        msg.isUser\r\n                                            ? \"user-message\"\r\n                                            : \"bot-message\"\r\n                                    }\r\n                                >\r\n                                    {msg.text}\r\n                                </div>\r\n                            </div>\r\n                        ))}\r\n                        <div ref={messagesEndRef}></div>\r\n                    </div>\r\n                    <form onSubmit={handleSendMessage}>\r\n                        <div className=\"input-group mt-3\">\r\n                            <input\r\n                                type=\"text\"\r\n                                className=\"form-control\"\r\n                                placeholder=\"Type your message...\"\r\n                                value={newMessage}\r\n                                onChange={(e) => setNewMessage(e.target.value)}\r\n                            />\r\n                            <button\r\n                                className=\"btn btn-primary\"\r\n                                onClick={handleSendMessage}\r\n                            >\r\n                                Send\r\n                            </button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"names":["Chatbot","messages","setMessages","useState","text","isUser","newMessage","setNewMessage","messagesEndRef","useRef","navigate","useNavigate","useEffect","localStorage","getItem","openai","OpenAI","apiKey","dangerouslyAllowBrowser","handleSendMessage","async","e","preventDefault","trim","prevMessages","botResponse","console","log","_response$choices$","_response$choices$$me","response","chat","completions","create","role","content","model","generatedText","choices","message","error","askOpenAI","current","scrollIntoView","behavior","_jsx","className","children","_jsxs","map","msg","index","ref","onSubmit","type","placeholder","value","onChange","target","onClick"],"sourceRoot":""}